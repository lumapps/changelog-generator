---
name: 'Changelog generator'
description: >
  Generate the changelog between now and the last tag,
  based on conventional commit.
author: 'SÃ©bastien Boulle'
branding:
  icon: 'bookmark'
  color: 'green'
inputs:
  github_token:
    description: |
      The github token to be used to fetch the repository

      Notes:
         this will become required in the next version
  tag_prefix:
    description: if you tags follow the `prefix/version` pattern
    required: false
  path_filters:
    description: |
      A space separated list of git path blob regex to be used to filters the commits.
      This can be used to keep only relevant commits by filtering on relevant files.
      Example:
        path_filters: "src/ doc/ tests/*/qa/*"
  target:
    description: A rev1..rev2 string to be used to generate the commit list
outputs:
  changelog:
    description: 'The generated changelog'
    value: ${{ steps.generate.outputs.changelog }}
runs:
  using: "composite"
  steps:
    - name: Install Python ${{ env.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    - name: Generate
      id: generate
      run: |
        # install de dependencies
        pip3 install -r ${{ github.action_path }}/requirements.txt

        # define the environment variables
        export PYTHONPATH=${{ github.action_path }}:$PYTHONPATH

        # for retro-compatibility purpose. once github_token is required, then no need for the if
        if  test ! -z "${{ inputs.github_token }}"
        then
          export GITHUB_TOKEN=${{ inputs.github_token }}
        fi

        # generate the change log
        CHANGELOG=$(python3 -m changelog_generator \
        --tag_prefix ${{ inputs.tag_prefix }} \
        --path_filters ${{ inputs.path_filters }} \
        --target ${{ inputs.target }}
        )

        # truncate the release note to not bloat the 65536 bytes max limit
        CHANGELOG=${CHANGELOG:0:65200}

        # output the changelog
        echo "CHANGELOG<<EOF" >> $GITHUB_ENV
        echo "$CHANGELOG" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

      shell: bash
